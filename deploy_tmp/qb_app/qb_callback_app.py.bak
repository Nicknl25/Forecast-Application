import os
import time
import pyodbc
import requests
from flask import Flask, request, jsonify
from dotenv import load_dotenv
from encrypt_qb_token import encrypt_token
from qb_app.db import get_connection

# === Load environment variables (works locally or in Azure) ===
load_dotenv()

app = Flask(__name__)

# ==============================================================
# üß© Logging Helper
# ==============================================================

def log(message):
    """Logs messages both to console and file (for debugging)."""
    print(message)
    try:
        log_path = "/home/site/wwwroot/qb_app/logs/callback_debug.log"
        os.makedirs(os.path.dirname(log_path), exist_ok=True)
        with open(log_path, "a") as f:
            f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {message}\n")
    except Exception:
        pass  # fail silently if file logging isn't available


# ==============================================================
# üß© QuickBooks OAuth Callback
# ==============================================================

@app.route("/api/qb/oauth/callback")
def qb_callback():
    """
    Handles QuickBooks redirect, stores encrypted tokens, 
    and triggers onboarding for new clients.
    """

    log("=== QuickBooks CALLBACK STARTED ===")

    code = request.args.get("code")
    realm_id = request.args.get("realmId")

    if not code or not realm_id:
        msg = "‚ùå Missing 'code' or 'realmId' in redirect URL."
        log(msg)
        return msg, 400

    # === 1Ô∏è‚É£ Exchange the auth code for tokens ===
    try:
        log("Step 1: Requesting OAuth tokens from QuickBooks...")
        redirect_uri = os.getenv("QB_REDIRECT_URI") or "https://finance-webapp-test-b0hdb2accff8fcgp.westus2-01.azurewebsites.net/api/qb/oauth/callback"
        log(f"Using redirect_uri: {redirect_uri}")
        response = requests.post(
            "https://oauth.platform.intuit.com/oauth2/v1/tokens/bearer",
            auth=(os.getenv("QB_CLIENT_ID"), os.getenv("QB_CLIENT_SECRET")),
            headers={
                "Accept": "application/json",
                "Content-Type": "application/x-www-form-urlencoded",
            },
            data={
                "grant_type": "authorization_code",
                "code": code,
                "redirect_uri": redirect_uri,
            },
            timeout=15,
        )
        data = response.json()
        log(f"Step 1 response: {data}")
    except Exception as e:
        msg = f"‚ùå Token request failed: {e}"
        log(msg)
        return msg, 500

    access_token = data.get("access_token")
    refresh_token = data.get("refresh_token")
    expires_in = data.get("expires_in", 3600)

    if not access_token or not refresh_token:
        msg = f"‚ùå Missing tokens in response: {data}"
        log(msg)
        return msg, 400

    # === 2Ô∏è‚É£ Encrypt the tokens ===
    try:
        access_token_enc = encrypt_token(access_token)
        refresh_token_enc = encrypt_token(refresh_token)
        log("Step 2: Tokens encrypted successfully.")
    except Exception as e:
        msg = f"‚ùå Encryption failed: {e}"
        log(msg)
        return msg, 500

    # === 3Ô∏è‚É£ Connect to Azure SQL ===
    try:
        log("Step 3: Connecting to Azure SQL...")
        conn = get_connection()
        cur = conn.cursor()
        log("‚úÖ SQL connection successful.")
    except Exception as e:
        msg = f"‚ùå Database connection failed: {e}"
        log(msg)
        return msg, 500

    # === 4Ô∏è‚É£ Upsert or Insert client_auth record ===
    try:
        log("Step 4: Checking if realm_id already exists...")
        cur.execute("SELECT id FROM client_auth WHERE realm_id = ?", (realm_id,))
        row = cur.fetchone()

        if row:
            log("Existing client found. Updating tokens...")
            cur.execute(
                """
                UPDATE client_auth
                SET access_token_enc = ?,
                    refresh_token_enc = ?,
                    token_expiry = DATEADD(SECOND, ?, GETUTCDATE()),
                    last_refresh = GETUTCDATE()
                WHERE realm_id = ?
                """,
                (access_token_enc, refresh_token_enc, expires_in, realm_id),
            )
            conn.commit()
            conn.close()
            log("‚úÖ Existing client updated successfully.")
            return "‚úÖ QuickBooks connection refreshed successfully!"

        # --- Otherwise, new client ---
        log("Fetching company info for new client...")
        company_name = "Unknown Company"
        try:
            company_url = f"https://quickbooks.api.intuit.com/v3/company/{realm_id}/companyinfo/{realm_id}"
            headers = {"Authorization": f"Bearer {access_token}", "Accept": "application/json"}
            r = requests.get(company_url, headers=headers)
            if r.status_code == 200:
                company_name = r.json().get("CompanyInfo", {}).get("CompanyName", "Unknown Company")
            log(f"Company name: {company_name}")
        except Exception as e:
            log(f"‚ö†Ô∏è Could not fetch company name: {e}")

        log("Inserting new client into client_auth table...")
        cur.execute(
            """
            INSERT INTO client_auth (client_name, realm_id, access_token_enc, refresh_token_enc, token_expiry, active)
            VALUES (?, ?, ?, ?, DATEADD(SECOND, ?, GETUTCDATE()), 1);
            """,
            (company_name, realm_id, access_token_enc, refresh_token_enc, expires_in),
        )

        cur.execute("SELECT CAST(SCOPE_IDENTITY() AS INT)")
        new_client_id = cur.fetchone()[0]
        conn.commit()
        conn.close()
        log(f"‚úÖ New client inserted successfully (id={new_client_id})")

    except Exception as e:
        msg = f"‚ùå Database error: {e}"
        log(msg)
        return msg, 500

    # === 5Ô∏è‚É£ Trigger onboarding function automatically ===
    try:
        app_base = os.getenv("APP_BASE_URL")
        function_key = os.getenv("TEST_FUNCTION_KEY")

        trigger_url = (
            f"{app_base}/api/manual_trigger_test"
            f"?target=onboard_client&client_id={new_client_id}&code={function_key}"
        )

        log(f"Triggering onboarding: {trigger_url}")
        trigger_response = requests.get(trigger_url, timeout=60)
        log(f"Onboarding trigger response ({trigger_response.status_code}): {trigger_response.text[:500]}")

    except Exception as e:
        log(f"‚ö†Ô∏è Could not trigger onboarding automatically: {e}")

    log("=== CALLBACK COMPLETED SUCCESSFULLY ===")
    return (
        f"‚úÖ QuickBooks connected successfully for client {new_client_id}! "
        f"Initial data load started automatically. You can close this window."
    )


# ==============================================================
# üß© Entry Point
# ==============================================================

if __name__ == "__main__":
    app.run(debug=True)

